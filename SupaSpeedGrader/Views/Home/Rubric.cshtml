@model SupaSpeedGrader.Models.RubricModel
@{
    ViewBag.Title = "Rubric";
    ViewData["state"] = Model.state;
}
<head>
    <style>
        .noDisplay{
            display:none;
        }
        .yesDisplay{

        }
        .noShow {
            visibility: hidden;
        }

    </style>
</head>
<body>
    <div>
        <h2>Rubric</h2>
        </div>
    <div>
        <p>Rubric Name: <input type="text" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='rubrName' /> </p>
    </div>
    <div style="width:100%">
        <p>Number of Questions: <input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='numQuestions' onchange="questionNum(this)" /> </p>
    </div>
    <p id="action"></p>
    <p id="action2"></p>
    <!-- For loop to set up the questions as hidden-->
    @for (int x = 1; x < 100; x++)
    {   // all of these variables reference the question number and what they are connected to so anything related to question 1 is a string to identify what is pointing to and the question number
        string questionNum = "questionNum" + x; 
        string rubricNum = "rubricNum" + x;
        string rubricButton = "button" + x;
        string criteriaNum = "crit" + x;
        string optionsNum = "opt" + x;
        <div class="noDisplay" id="@questionNum">
            <p>Question @x</p>
            <input type="button" value="+ Rubric" onclick="rubricNum(@x)" id="@rubricButton" />
            <div class="noDisplay" id="@rubricNum">
                @*These appear if the rubric is sleected to determine the layout of the points*@
                <p>Number of Criteria <input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='@criteriaNum' onchange="criteria(this,@x)" value="0" /></p>
                <p>Number of Options per Criteria<input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='@optionsNum' onchange="option(this,@x)" value="0" /></p>
                @* row ->i; col -> j These for loops create the grids of the rubric. *@
                @for (int i = 0; i < 10; i++)
                {
                    <div style="display:flex">
                        <!-- the boxes are named as identifid by their position and which grid they are on The ID adjust to which input it points to within the box-->
                        @{string boxID = "box" + i + "," + 0 + "of" + x;
                            string firstBinForRow = boxID + "n";
                        }
                        <div id="@boxID" style="float:left; width :10%; " class="noDisplay">
                            <p style="font-size:80%"> Criteria Name </p>
                            <textarea style="height:50px; width:100%;border:1px solid black; background-color:transparent " id='@firstBinForRow'></textarea>
                        </div>
                        @for (int j = 1; j < 9; j++)
                        {
                            boxID = "box" + i + "," + j + "of" + x;
                            string points = boxID + "p";
                            string comment = boxID + "c";


                            <div id="@boxID" style="float:left; width :11.25%" class="noDisplay">
                                <p style="font-size:80%"> Points <input type="number" style="height:20px; width:50px; border:1px solid black; background-color:transparent " id='@points'  /></p>
                                <p style="font-size:80%">Comment</p> <textarea style="height:25px; width:100%;border:1px solid black; background-color:transparent " id='@comment'></textarea>
                            </div>
                        }
                    </div>
                }

            </div>
        </div>

    }
    <input type="button" value="Submit" onclick="submitData()" />

    <form name="jsonForm" action="../api/RubricSubmission">
        <div class="hidden">
            <input type="hidden" type="text" name="state" id="state" value="@Model.state">
            <input type="hidden" type="text" name="nameBrick" id="nameBrick" value="">
            <input type="hidden" type="text" name="questionCount" id="questionCount" value="">
            <input type="hidden" type="text" name="json" id="json" value="">
            <input type="hidden" type="text" name="rubricCols" id="rubricCols" value="">
            <input type="hidden" type="text" name="rubricRows" id="rubricRows" value="">
        </div>
    </form>

    <p id="testArea"></p>




    <script>
        @* these variables stores all the data, the numbers with rubrics are stored in rubric Num and all of the data is stored in the rubric map
            *@
        var rubricNums = [];
        var rubricData = [];
        var rubricName;
        var questionNumber;
        var first = 0;

        var rubricCols = 0; //used for rubricCols, please pass to grade page
        var rubricRows = 0; //used for rubricRows, please pass to grade page also


        @* unhides questions *@
        function questionNum(source) {
            var e = source.value;
            for (var b = 1; b <= e; b++) {
                var question = "questionNum" + b;
                document.getElementById(question).className = "yesDisplay";
            }
            e++;
            @* hides any additional questions*@
            for (b = e; e < 101; b++) {
                var question = "questionNum" + b;
                document.getElementById(question).className = "noDisplay";
            }
        }
        @* unhides rubric and hides add rubric button*@
        function rubricNum(x) {
            var rubric = "rubricNum" + x;
            document.getElementById(rubric).className = "yesDisplay";
            rubric = "button" + x;
            document.getElementById(rubric).className = "noDisplay";
            rubricNums.push(x);

        }


        @* unhides criteria based on number given*@ 
        function criteria(source, a) {
            @* this pulls the oprions num to make it adjustable*@
            var options = "opt" + a;
            var optionNum = document.getElementById(options).value;
            var criteria = source.value;

            //this code is cancer, to whoever maintains this in the future I'm so goddamn sorry
            rubricRows = source.value;


            for (var c = 0; c < criteria; c++) {
                var box = "box" + c + "," + "0" + "of" + a;
                document.getElementById(box).className = "yesDisplay";
                document.getElementById(box).style.backgroundColor = "lightgrey";
                document.getElementById(box).style.border = "1px solid black";
                @*\this helps with the formatting of the lines wihtout this section it formats incorrectly*@
                optionNum++;
                rubricCols++;
                for (var b = optionNum; b < 9; ++b) {
                    box= "box" + c + "," + b + "of" + a;
                    document.getElementById(box).className = "noShow";
                }
            }
            for (var c = criteria; c < 11; c++) {
                for (var b = 0; b < 9; ++b) {
                    box= "box" + c + "," + b + "of" + a;
                    document.getElementById(box).className = "noDisplay";
                }
            }
            //rubricCols = optionNum;
        }
        @* unhides options based on number given *@ 
        function option(source, a) {
            var criteria = "crit" + a;
            var criteriaNum = document.getElementById(criteria).value;
            var option = source.value;
            option++;
            for (var c = 0; c < criteriaNum; c++) {
                for (var b = 1; b < option; b++) {
                    var box = "box" + c + "," + b + "of" + a;
                    document.getElementById(box).className = "yesDisplay";
                    document.getElementById(box).style.border = "1px solid black";
                }
                for (var b = option; b < 9; ++b) {
                    var box = "box" + c + "," + b + "of" + a;
                    document.getElementById(box).className = "noShow";
                }
            }

        }
        @* submits the data*@
        function submitData() {


            rubricName = document.getElementById("rubrName").value; 
            questionNumber = document.getElementById("numQuestions").value;
            @* this loops puts everything into the map*@



            for (var i = 0; i < rubricNums.length; i++) {


                var options = "opt" + rubricNums[i];

                var optionsNum = document.getElementById(options).value; 

                var criteria = "crit" + rubricNums[i];

                var criteriaNum = document.getElementById(criteria).value;

                var rubricTable = [];



                for (var j = 0; j < criteriaNum; j++) {

                    var row= [];
                    var box = "box" + j + "," + 0 + "of" + rubricNums[i] + "n";
                    var pointComments = [];
                    pointComments.push(document.getElementById(box).value);
                    row.push(pointComments); 
                    for (var k = 1; k <= optionsNum; k++) {
                        pointComments = new Array();
                        box = "box" + j + "," + k + "of" + rubricNums[i] + "p";
                        pointComments.push(document.getElementById(box).value);
                        box= "box" + j + "," + k + "of" + rubricNums[i] + "c";
                        pointComments.push(document.getElementById(box).value);
                        row.push(pointComments);
                        
                    }                 
                    rubricTable.push(row);
                }
                rubricData.push(rubricTable);
            }



            document.getElementById("json").value = JSON.stringify(rubricData);
            document.getElementById("nameBrick").value = rubricName;
            document.getElementById("questionCount").value = questionNumber;
            document.getElementById("rubricCols").value = rubricCols;
            document.getElementById("rubricRows").value = rubricRows;

            document.jsonForm.submit();
        }

    </script>
</body>
