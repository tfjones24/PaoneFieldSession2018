@model SupaSpeedGrader.Models.GradeModel

@{
    //Set some shared information
    ViewBag.Title = "Grade";        
    ViewData["state"] = Model.state;

    //Some other garbage
    string defaultColor = "white";          //non selected color
    string highlightColor = "lightgray";    //selected container color
    Model.studentAt = 0;                    //Initializes the Model.studentAt. Kinda useless as we start at 0 anyways and use a javascript variable



}
<head>
    <link rel="stylesheet" type="text/css" href="StyleSheet1.css" />






    <style>
        /*everything in here is used for the buttons of jumpto, highlight, and autograde*/



        .btn-group button {
            background-color: lightgray; /* gray background */
            border: 1px solid black; /* black border */
            color: black; /* black text */
            padding: 10px 24px; /* Some padding */
            cursor: pointer; /* Pointer/hand icon */
            float: left; /* Float the buttons side by side */
        }

        /* Clear floats (clearfix hack) */
        .btn-group:after {
            content: "";
            clear: both;
            display: table;
        }

        .btn-group button:not(:last-child) {
            border-right: none; /* Prevent double borders */
        }

        /* Add a background color on hover */
        .btn-group button:hover {
            background-color: darkgray;
        }

        #searchtext span {
            background-color: #FF9;
            color: #555;
        }
    </style>
</head>
<body onload="navBarCheck(); loadRubric(); rubricParseCheck();">
    <!--navBarCheck basically takes the extra cells that are generated and makes them invisible at the end of the nav list
        rubricParseCheck relies on the rubricParsed variable in model to tell it if we're using a rubric or not. 1 for yes 0 for no-->

    <div style="display: flex; border-bottom:1px solid black">
        <div style="float:left; width:52%">
            <h3 style="color: #21314d"> @Model.quizName </h3>   <!--name of the quiz-->
        </div>



        <!--Navigation Bar-->
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value="<<" onclick="down10()" />       <!--arrow to move down-->
        </div>
        <!--first set of question numbers-->
        @{
            string newID = "questionSet0";
        }
        <div style="float:left; width:40%" id="@newID">
            <!--populates the first 10 questions, value of each button will increment up with x var-->
            @for (int x = 0; x < 10; x++)
            {

                <div style="float:left; width:10%">
                    <input type="button" style="width:100%; background-color:lightgray" value="@x" id="questionNumber" name="questionNumber" onclick="changeQuestion(this)" />
                </div>
            }
        </div>


        <!--other hidden numbers-->
        <!--everything past the first 10 questions, value also increments with for loop-->
        @for (var i = 1; i < (1 + (Model.navBarQuestions.Count / 10)); i++)
        {
            newID = "questionSet" + i;
            <div style="float:left; width:40%; display:none" id="@newID">
                @for (int x = (i * 10); x < ((i + 1) * 10); x++)
                {
                    <div style="float:left; width:10%">
                        <input type="button" style="width:100%; background-color:lightgray" value="@x" id="questionNumber" name="questionNumber" onclick="changeQuestion(this)" />
                    </div>
                }
            </div>

        }
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value=">>" onclick="up10()" />    <!--button to move the responses to the next 10-->
        </div>
    </div>
    <p></p>




    <div id="searchtext">
        <!--- left column--->
        <div style="float:left; width: 75%">



            <!--- question name (under nav bar) --->
            <div>
                <p>@Model.questionName </p>
            </div>






            <!--- total response container that holds student names, responses, and small grade square --->

            <div>
                <ul style=" list-style-type: none; padding: 0; overflow: auto; width:100%; max-height:500px">
                    <!--populates each individual student field as a div-->
                    @for (int x = 0; x < Model.numStudent; x++)
                    {
                        string uniqueName = "studentResponse" + x;                  //each response's name is studentResponse plus whatever number the reponse is. i.e. studentResponse12
                        <li id='response' name="@uniqueName" style="background-color:white">
                            @{ string color = defaultColor; //variable that is changed when the response is highlighted
                                string remp = "response" + x;   //variable used to set the id for each group of elements to tie them together, i.e. response12 for all 3 of these elements in this response container
                            }


                            @if (x == Model.studentAt)  //used to highlight the first response on page load
                            {
                                color = highlightColor;
                            }
                            <div style="display:flex; background-color:transparent">
                                <div onclick="highlightResponse(this)" style="float:left; width:15%; background-color:@color" id="@remp">
                                    <!--Student name on the left-->
                                    <p> @x. @Model.names[x]  </p>
                                </div>
                                <div class="trueResponse" onclick="highlightResponse(this)" style="float:left; width:50%;  border:1px solid black; border-radius:5px; background-color:aliceblue" id="@remp">
                                    <!--Response box-->
                                    <p>@Model.namesGrades[Model.names[x]][0]</p>
                                </div>

                                <div class="numberGrade" onclick="highlightResponse(this)" style="float:left; width:35%; background-color:@color" id="@remp">
                                    <!--Holds the grade box on the right-->
                                    @{
                                        string demo = "demo" + x;
                                        string grades = "grade" + x;
                                    }
                                    <p style="text-align:center"> Grade :<input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='@grades' value='@Model.namesGrades[Model.names[x]][1]' onchange="leftSideGrade(this)" /> / @Model.gradeOutOf</p>

                                    <p id="@demo"></p>

                                </div>
                            </div>
                        </li>
                        <p></p>
                    }
                </ul>
            </div>

        </div>




        <!--- right column--->
        <div style="float:left; width: 25%;">
            <!--- top row--->
            <div id="buttonInputBar" style="display:none">
                <input id="searchBar" type="text" name="search" onchange="tripleTrigger(this)">
                <!--tripleTrigger is a function for the search bar that is revealed on button press to
                    make the button functionality work-->
            </div>

            <div class="btn-group">
                <!--buttons for the secondary functionality, lives above the rubric-->

                <button onclick="hkReveal()">Highlight Keyword</button>
                <button onclick="jtReveal()">Jump to...</button>
                @*<button onclick="afReveal()">Autograde and Filter</button>*@


            </div>




            <!--- Rubric--->

            <div id="rubricParseWarning">
                <p style="color:red; font-size:200%">Rubric not found</p> <!--error message that displays when rubricParsed is set to 0, hides full rubric-->
            </div>



            <div id="rubricWhole" style="">
                <!--rubric container, holds the rubric-->
                <p>@Model.rubicTitle</p><!--Model.rubicTitle=what the rubric has been named-->
                @for (int i = 0; i < Model.rubicRows; ++i)
                {<div style="display: flex">
                        <div style="float:left;width: @Model.width%; background-color:grey; border:1px solid black">
                            @Model.rubic[i][0]      <!--michelle has the rubric parsing in so the beginning of each row is colored gray as the description of how to grade that part-->
                        </div>
                        @for (int j = 1; j < Model.rubicCols; ++j)
                        {

                            string clap = "rubr" + i;   //used to set unique ids for the rubric buttons. i.e. rubr12

                            <div style="float:left; width:@Model.width%;border:1px solid black">
                                <input class="rubricButton" onclick=highlightRubic(this) onmouseover="hoverRubric(this)" onmouseout="exitRubric(this)" type="button" style="width:100%; background-color:white; border:none" value="@Model.rubic[i][j]" id='@clap' />
                            </div>
                        }
                    </div>

                }

            </div>
            <p></p>




            <!--- button row--->
            <div style="display: flex">
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value=" Revert" onclick="revert()" /></form><!--just the button for revert-->
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save" onclick=save() /></form><!--button for save-->
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save&Next" onclick=saveNext() /></form><!--button for save and next-->
                </div>
            </div>
            <p></p>




            <!--- Comment Box--->
            <div>
                <form>
                    <textarea style="height:100px; width:100%; border:1px solid black; border-radius:5px" onchange="updateComments(this)" id="comment" value=""> </textarea>
                    <input type="reset" value="Clear">  <!--clear button with no need for a function. heckin yeah thanks stackoverflow-->
                </form>
            </div>
            <!--clear box-->

            <br />
            <br />




            <!--- Grade Box-->
            <div style="height:10%">
                <!--this is the grade box on the right hand side of the screen. used to grade the response highlighted-->
                <p>Grade : <input type="number" style="height:20px; width:100px; border:1px solid black;overflow:visible " id="grade" value="@Model.namesGrades[Model.names[Model.studentAt]][1]" onchange="myGrade()" /> /@Model.gradeOutOf </p>
            </div>
            <p id="graded"></p>
        </div>
    </div>


    <!--just random text things we used for debugging. nothing should reference these by the end-->
    <p id="action"></p>
    <p id="action1"></p>
    <p id="action2"></p>
    <p id="action3"></p>








    <script>
        var questionSetCurrent = 0; //used to check if we can move up or down in the nav bar. represents the number of the set of questions displayed (0-10=0, 11-20=1, so on)
        var studentAt = 0;          //tracks the current student response that is being referenced. initializes the first response at studentAt=0
        var comments = [];          //Holds the comments for each student respones. Array position is equal to the studentAt number of each response
        var arrayOfStudents = @Html.Raw(Json.Encode(Model.names.ToArray()));
        //var userNameToID = @Model.userNameToID;

        for (var x = 0; x < @Model.names.Count(); x++) {
            comments[x]="";                           //function used to populate comment array with empty comments for every response
        }



        //set of variables used by tripleTrigger to determine which functionality is being used for the singular search bar
        var highlight = 0;
        var jumpto = 0;
        var autograde = 0;


        function hkReveal() {
            var searchBar = document.getElementById("buttonInputBar");                      //fucntion to reveal highlight search bar
            searchBar.style = "";
            highlight = 1;
            jumpto = 0;
            autograde = 0;                                                                      //working
            document.getElementById("searchBar").placeholder = "Word to highlight...";
            document.getElementById("searchBar").value = "";
        }

        function jtReveal() {
            var searchBar = document.getElementById("buttonInputBar");                      //function to reveal jumpto search bar
            searchBar.style = "";
            highlight = 0;
            jumpto = 1;
            autograde = 0;
            document.getElementById("searchBar").placeholder = "Jump to Response...";           //working
            document.getElementById("searchBar").value = "";
            document.getElementById("searchBar").type = "number";
        }

        function afReveal() {
            var searchBar = document.getElementById("buttonInputBar");                      //function to reveal autograde and filter search bar
            searchBar.style = "";
            highlight = 0;
            jumpto = 0;
            autograde = 1;
            document.getElementById("searchBar").placeholder = 'Autograde value...';            //not working
            document.getElementById("searchBar").value = "";
        }





        //Functionality for the 3 buttons over rubric
        function tripleTrigger(source) {
            if (highlight == 1) {                                           //this if triggers for highlight, not sure how it works but meh
                var text = document.getElementById("searchBar").value;
                var query = new RegExp("(\\b" + text + "\\b)", "gim");
                var e = document.getElementById("searchtext").innerHTML;
                var enew = e.replace(/(<span>|<\/span>)/igm, "");
                document.getElementById("searchtext").innerHTML = enew;
                var newe = enew.replace(query, "<span>$1</span>");
                document.getElementById("searchtext").innerHTML = newe;
            }
            else if (jumpto == 1) {                                         //this if triggers jumpTo functionality, easily works
                //ajax save current state
                var studentScore = document.getElementById("grade" + studentAt).value;
                ajaxSave(arrayOfStudents[studentAt], comments[studentAt], studentScore);



                if (source.value > -1 && source.value < @Model.numStudent) {
                    highlightResponse(document.getElementById("response" + source.value));
                    studentAt = source.value;
                }
                else if (source.value < 0) {
                    source.value = 0;
                    highlightResponse(document.getElementById("response" + source.value));
                    studentAt = source.value;
                }
                else if (source.value > @Model.numStudent) {
                    source.value = @Model.numStudent;
                    highlightResponse(document.getElementById("response" + source.value));
                    studentAt = source.value;
                }


            }
            else if (autograde == 1) {                                      //this if triggers autograde functionality, not sure what I'm trying but it doesn't work, please ignore
                //need to implement, reference response values and adjust grade to full
                var responses = document.getElementsByName("trueResponse");
                for (var i = 0; i < response.length; i++) {
                    if (responses[i].value == document.getElementById("searchBar").value) {

                        var responseWeWant = document.getElementsByName("numberGrade");
                        for (var j = 0; j < responseWeWant.length; j++) {
                            if (responseWeWant[j].id = responses[i].id) {
                                responseWeWant[j] = @Model.gradeOutOf;
                            }
                        }
                    }
                }
            }
        }







        //NAV BAR FUNCTIONS FOR MOVING
        function down10() {
            if (questionSetCurrent > 0) {
                questionSetCurrent--;
                var oldQuestions = document.querySelectorAll("#questionSet" + (questionSetCurrent + 1));    //selects the old question buttons
                var newQuestions = document.querySelectorAll("#questionSet" + questionSetCurrent);          //selects the new ones

                for (var i = 0; i < oldQuestions.length; i++) {
                    oldQuestions[i].style = "float:left; width:40%; display:none";      //hides the old buttons
                }
                for (var i = 0; i < newQuestions.length; i++) {
                    newQuestions[i].style = "float:left; width:40%"                     //shows the new buttons
                }


            }
        }

        function up10() {       //moves the nav bar to the next 10 entries with the right arrow button

            if (questionSetCurrent < (@Model.navBarQuestions.Count/10)-1) {
                questionSetCurrent++;
                var oldQuestions = document.querySelectorAll("#questionSet" + (questionSetCurrent - 1));        //gets old questions
                var newQuestions = document.querySelectorAll("#questionSet" + questionSetCurrent);              //gets new questions

                for (var i = 0; i < oldQuestions.length; i++) {
                    oldQuestions[i].style = "float:left; width:40%; display:none";              //hides old questions
                }
                for (var i = 0; i < newQuestions.length; i++) {
                    newQuestions[i].style = "float:left; width:40%"                 //shows new questions
                }


            }

        }


        function updateComments(source) {
            comments[studentAt] = source.value;     //basically pushes the comment from the comment box into the comment array variable initialized at the top of <script>
        }



        function exitRubric(source) {
            if (source.style.backgroundColor == "lightblue") {  //used when your mouse leaves the square of a rubric piece
                source.style.backgroundColor = "white";
           }
        }
        function hoverRubric(source) {
            if (source.style.backgroundColor=="white") {    //when the mouse enters the square of a rubric piece
                source.style.backgroundColor = "lightblue";
            }
        }

        function leftSideGrade(source) {
                                                                        //used to set the right hand side grade to
            document.getElementById("grade").value = source.value;

        }


        function myGrade() {        //counterpart to leftSideGrade, does the same thing but from the right.
            var y = document.getElementById("grade").value;

            var grade = "grade" + studentAt;
            document.getElementById(grade).value = y;

        }


        function revert() {                 //a function to nuke the response back to ground zero and rebuild. (shoutout to fallout 76 being released soon)

            document.getElementById("comment").value = "";

            updateComments(document.getElementById("comment"));
            document.getElementById("grade").value = 0;
            document.getElementById("grade" + studentAt).value = 0;
            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }
        }



        function save() {                       //need ajax call to upload this to canvas**********
            updateComments(document.getElementById("comment"));


            var studentScore = document.getElementById("grade" + studentAt).value;
            ajaxSave(arrayOfStudents[studentAt], comments[studentAt], studentScore);
        }




        function navBarCheck() {

            var questionNums = document.getElementsByName("questionNumber");
            for (var i = 0; i < questionNums.length; i++) {
                if (questionNums[i].value > @Model.navBarQuestions.Count()) {
                    questionNums[i].style.visibility="hidden";
                }
            }
        }



        function highlightResponse(source) {
            //ajax save old state
            var studentScore = document.getElementById("grade" + studentAt).value;
            ajaxSave(arrayOfStudents[studentAt], comments[studentAt], studentScore);


            var newResponse = document.querySelectorAll('#' + source.id);   //populate with new response selection elements
            var lastID = "#response" + studentAt;                           //Id of last selection pulled using studentAt variable
            var oldResponse = document.querySelectorAll(lastID);            //populate with old response selection elements


            for (var i = 0; i < oldResponse.length; i++) {                          //Deselect the old one
                if (oldResponse[i].style.backgroundColor == "aliceblue") {  //using alice blue as an easy color that is unique to the response field
                    //don't color response gray
                }
                else {
                    oldResponse[i].style.backgroundColor = "@defaultColor";
                }

            }
            for (var i = 0; i < newResponse.length; i++) {
                if (newResponse[i].style.backgroundColor == "aliceblue") {              //Highlight new one
                    //don't color response gray
                }
                else {
                    newResponse[i].style.backgroundColor = "@highlightColor";
                }

            }



            studentAt = parseInt(source.id.substr(8));  //update studentAt
            //document.getElementById("action").innerHTML = "studentAt is set to " + studentAt;       //doublecheck we right


            //CLEAR RIGHT HAND SIDE

            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }


            //Correctly add in things on right side
            document.getElementById("grade").value = document.getElementById("grade"+studentAt).value;
            document.getElementById("comment").value = comments[studentAt]; //TODO comment is returning as undefined still


        }





        function saveNext() {               //used for save and next button for next question highlighting

            //ajax save old state
            var studentScore = document.getElementById("grade" + studentAt).value;
            ajaxSave(arrayOfStudents[studentAt], comments[studentAt], studentScore);





           // document.getElementById("action").innerHTML = "You pressed save&next with " + (studentAt+1) + " out of @Model.names.Count()";    //only says 0, will update only to 0
            if (studentAt != (@Model.names.Count()-1)) {


                var responseToHighlight = document.querySelectorAll("#response" + (studentAt + 1)); //get response to highlight

                var responseToDeselect = document.querySelectorAll("#response" + studentAt);    //get response to deselect
                studentAt++;    //fix studentAt



                for (var i = 0; i < responseToDeselect.length; i++) {
                    if (responseToDeselect[i].style.backgroundColor != "aliceblue") {
                        responseToDeselect[i].style.backgroundColor = "@defaultColor";          //highlight and deselect this shit
                    }
                }

                for (var j = 0; j < responseToHighlight.length; j++) {
                    if (responseToHighlight[j].style.backgroundColor != "aliceblue") {
                        responseToHighlight[j].style.backgroundColor = "@highlightColor";
                    }
                }
            }

            var grade ="grade" + studentAt; //used to reference the correct responses grade box


            //everything else used to update right hand side to the selected response info including clearing rubric, populating comment and grade box

            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }

            document.getElementById("grade").value = document.getElementById(grade).value;
            document.getElementById("comment").value = comments[studentAt]; //this works now
        }



        function highlightRubic(source) {               //function used to highlight rubric piece,
                                                        //TODO: add grade value from rubric piece to grade boxes**********************************************************************

            var buttons = document.querySelectorAll('#' + source.id);


            for (var x = 0; x < buttons.length; x++) {
                buttons[x].style = "width:100%; background-color:white; border:none";
            }

            source.style = "width:100%; background-color:lightgreen; border:none"

        }


        function changeQuestion(source) {
            //ajax save current state
            var studentScore = document.getElementById("grade" + studentAt).value;
            ajaxSave(arrayOfStudents[studentAt], comments[studentAt], studentScore);


                //make ajax call to change page to question of this number(reference value of button)

                    document.getElementById("action").innerHTML = "Button pressed to move to question " + source.value;

            }



        //not needed right now until implementing the parsing rubric check. currently not working. going to comment error message
        function rubricParseCheck() {

           //alert("RUBRIC CHECK RUN with rubricParsed as " + @Model.rubricParsed);
            var source = document.getElementById("rubricWhole");
           // document.getElementById("rubricParseWarning").style = "display:none";

            if (@Model.rubricParsed == 1) {

                source.style ="display:none";

            }
            else {

                document.getElementById("rubricParseWarning").style = "display:none";
            }

        }



        function ajaxSave(studentName, comment, score) {
            var questionId = @Model.questionID;
            var quizId = @Model.quizID;
            //   var userID = userNameToID[studentName];
            alert("Call sorta made!" + studentName + " " + comment + " " + score);

            var state = "@Model.state";

            var postData = { "quiz": quizId, "state": state, "question": questionId, "student": studentName, "comment": comment, "score":score };

            $.ajax({
                type: "POST",
                url: "/api/updateScore",
                data: postData,
                success: function (data) {
                    alert(data.Result);
                },
                dataType: "json",
                traditional: true
            });


        }

        function loadRubric() {
            var rubricMap = json.parse(@Model.rubricJSON);  //just used to get object
            const mapOfRubrics = (rubricMap => {
                const mp = new Map;
                Object.keys(rubricMap).forEach(k => { mp.set(k, rubricMap[k]) });
                return mp;
            });

            var rubric = mapOfRubrics.get(Model.ques)


            for (var row = 0; row < @Model.rubicRows; row++) {
                for (var col = 0; col < @Model.rubicCols; col++) {

                }
            }

        }


    </script>
</body>





