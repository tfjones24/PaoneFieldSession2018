@model SupaSpeedGrader.Models.GradeModel

@{ 
    ViewBag.Title = "Grade";

    string defaultColor = "white";
    string highlightColor = "lightgray";
    string[] shownSet = new string[10];
    Model.studentAt = 0;



}
<head>
    <link rel="stylesheet" type="text/css" href="StyleSheet1.css" />


    <!--DECLARING VARIABLES IN THIS SCRIPT BELOW-->






    <!--<style>
        /* Style The Dropdown Button */
        .dropbtn {
            background-color: #4CAF50;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

        /* The container <div> - needed to position the dropdown content */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        /* Dropdown Content (Hidden by Default) */
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

            /* Links inside the dropdown */
            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                /* Change color of dropdown links on hover */
                .dropdown-content a:hover {
                    background-color: #f1f1f1
                }

        /* Show the dropdown menu on hover */
        .dropdown:hover .dropdown-content {
            display: block;
        }

        /* Change the background color of the dropdown button when the dropdown content is shown */
        .dropdown:hover .dropbtn {
            background-color: #3e8e41;
        }
    </style>
        -->



    <style>
        .btn-group button {
            background-color: lightgray; /* gray background */
            border: 1px solid black; /* black border */
            color: black; /* black text */
            padding: 10px 24px; /* Some padding */
            cursor: pointer; /* Pointer/hand icon */
            float: left; /* Float the buttons side by side */
        }

        /* Clear floats (clearfix hack) */
        .btn-group:after {
            content: "";
            clear: both;
            display: table;
        }

        .btn-group button:not(:last-child) {
            border-right: none; /* Prevent double borders */
        }

        /* Add a background color on hover */
        .btn-group button:hover {
            background-color: darkgray;
        }

        #searchtext span {
            background-color: #FF9;
            color: #555;
        }


    </style>
</head>
<body onload="navBarCheck(); rubricParseCheck();">
   
    <div style="display: flex; border-bottom:1px solid black">
        <div style="float:left; width:52%">
            <h3 style="color: #21314d"> @Model.questionName </h3>
        </div>



<!--Navigation Bar-->
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value="<<" onclick="down10()"/>
        </div>
        <!--first set of question numbers-->
        @{ 
            string newID = "questionSet0";
        }
        <div style="float:left; width:40%" id="@newID">
            @for (int x = 0; x < 10; x++)
            {
                
                <div style="float:left; width:10%">
                    <input type="button" style="width:100%; background-color:lightgray" value="@x" id="questionNumber" name ="questionNumber" onclick="changeQuestion(this)" />
                </div>
            }
        </div>
        <!--other hidden numbers-->
        @for (var i = 1; i < (1+(Model.navBarQuestions.Count/10)); i++)
        {
            newID = "questionSet" + i;   //Makes ID for set the same, but different for each set
        <div style="float:left; width:40%; display:none" id="@newID" >
            @for (int x = (i*10); x < ((i+1)*10); x++)
            {
                     
                   
                    
                <div style="float:left; width:10%">
                    <input type="button" style="width:100%; background-color:lightgray" value="@x"  id="questionNumber" name="questionNumber" onclick="changeQuestion(this)"/>
                </div>
            }
        </div>
       
        }
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value=">>" onclick="up10()"/>
        </div>
    </div>
    <p></p>




    <div id="searchtext">
        <!--- left column--->
        <div style="float:left; width: 75%">
            <!--- question name (under nav bar) --->
            <div>
                <p>@Model.question </p>
            </div>






            <!--- total response container --->

            <div>
                <ul style=" list-style-type: none; padding: 0; overflow: auto; width:100%; max-height:500px">
                    @for (int x = 0; x < Model.numStudent; x++)
                    {
                        <li id='response' style="background-color:white">
                            @{ string color = defaultColor;
                                string remp = "response" + x;
                                //string remp2 = "response" + x;
                            }
                            @if (x == Model.studentAt)
                            {
                                color = highlightColor;
                            }
                            <div style="display:flex; background-color:transparent">
                                <div onclick="highlightResponse(this)" style="float:left; width:15%; background-color:@color" id="@remp">
                                    <!--Student name on the left-->
                                    <p> @Model.names[x]  </p>
                                </div>
                                <div class="trueResponse" onclick="highlightResponse(this)" style="float:left; width:50%;  border:1px solid black; border-radius:5px; background-color:aliceblue" id="@remp">
                                    <!--Response box-->
                                    <p>@Model.namesGrades[Model.names[x]][0]</p>
                                </div>

                                <div class="numberGrade" onclick="highlightResponse(this)" style="float:left; width:35%; background-color:@color" id="@remp">
                                    <!--Holds the grade box on the right-->
                                    @{
                                        string demo = "demo" + x;
                                        string grades = "grade" + x;
                                    }
                                    <p style="text-align:center"> Grade :<input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='@grades' value='@Model.namesGrades[Model.names[x]][1]' onchange="leftSideGrade(this)" /> / @Model.gradeOutOf</p>

                                    <p id="@demo"></p>

                                </div>
                            </div>
                        </li>
                        <p></p>
                    }
                </ul>
            </div>

        </div>


    

        <!--- right column--->
        <div style="float:left; width: 25%;">
            <!--- top row--->
            <div id="buttonInputBar" style="display:none">
                <input id="searchBar" type="text" name="search" onchange="tripleTrigger(this)">
            </div>

            <div class="btn-group">


                <button onclick="hkReveal()">Highlight Keyword</button>
                <button onclick="jtReveal()">Jump to...</button>
                <button onclick="afReveal()">Autograde and Filter</button>


            </div>




            <!--- Rubric--->

            <div id="rubricParseWarning">
                <p style="color:red; font-size:200%">Rubric not found</p>

            </div>



            <div id="rubricWhole" style="">
                <p>@Model.rubicTitle</p>
                @for (int i = 0; i < Model.rubicRows; ++i)
                {<div style="display: flex">
                        <div style="float:left;width: @Model.width%; background-color:grey; border:1px solid black">
                            @Model.rubic[i][0]
                        </div>
                        @for (int j = 1; j < Model.rubicCols; ++j)
                        {

                            string clap = "rubr" + i;

                            <div style="float:left; width:@Model.width%;border:1px solid black">
                                <input class="rubricButton" onclick=highlightRubic(this) onmouseover="hoverRubric(this)" onmouseout="exitRubric(this)" type="button" style="width:100%; background-color:white; border:none" value="@Model.rubic[i][j]" id='@clap' />
                            </div>
                        }
                    </div>

                }

            </div>
            <p></p>




            <!--- button row--->
            <div style="display: flex">
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value=" Revert" onclick="revert()" /></form>
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save" onclick=save() /></form>
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save&Next" onclick=saveNext() /></form>
                </div>
            </div>
            <p></p>




            <!--- Comment Box--->
            <div>
                <form>
                    <textarea style="height:100px; width:100%; border:1px solid black; border-radius:5px" onchange="updateComments(this)" id="comment" value=""> </textarea>
                    <input type="reset" value="Clear">
                </form>
            </div>
            <!--clear box-->

            <br />
            <br />




            <!--- Grade Box-->
            <div style="height:10%">
                <p>Grade : <input type="number" style="height:20px; width:100px; border:1px solid black;overflow:visible " id="grade" value="@Model.namesGrades[Model.names[Model.studentAt]][1]" onchange="myGrade()" /> /@Model.gradeOutOf </p>
            </div>
            <p id="graded"></p>
        </div>
    </div>

    <p id="action"></p>
    <p id="action1"></p>
    <p id="action2"></p>
    <p id="action3"></p>
    
    





    
    <script>
        var questionSetCurrent = 0;
        var studentAt = 0;
        var comments = [];
       // @{int c = 0;}
        for (var x = 0; x < @Model.names.Count(); x++) {
            //if (@Model.namesGrades[Model.names[c]][2]== undefined) {
                comments[x]="";
            //}
        
         //   @{c++;}
        }




        var highlight = 0;
        var jumpto = 0;
        var autograde = 0;
        function hkReveal() {
            var searchBar = document.getElementById("buttonInputBar");
            searchBar.style = "";
            highlight = 1;
            jumpto = 0;
            autograde = 0;                                                                      //working
            document.getElementById("searchBar").placeholder = "Word to highlight...";
            document.getElementById("searchBar").value = "";
        }
        
        function jtReveal() {
            var searchBar = document.getElementById("buttonInputBar");
            searchBar.style = "";
            highlight = 0;
            jumpto = 1;
            autograde = 0;
            document.getElementById("searchBar").placeholder = "Jump to Response...";           //working
            document.getElementById("searchBar").value = "";
            document.getElementById("searchBar").type = "number";
        }

        function afReveal() {
            var searchBar = document.getElementById("buttonInputBar");
            searchBar.style = "";
            highlight = 0;
            jumpto = 0;
            autograde = 1;
            document.getElementById("searchBar").placeholder = 'Autograde value...';            //not working
            document.getElementById("searchBar").value = "";
        }





        //Functionality for the 3 buttons over rubric
        function tripleTrigger(source) {
            if (highlight == 1) {
                var text = document.getElementById("searchBar").value;
                var query = new RegExp("(\\b" + text + "\\b)", "gim");
                var e = document.getElementById("searchtext").innerHTML;
                var enew = e.replace(/(<span>|<\/span>)/igm, "");
                document.getElementById("searchtext").innerHTML = enew;
                var newe = enew.replace(query, "<span>$1</span>");
                document.getElementById("searchtext").innerHTML = newe;
            }
            else if (jumpto == 1) {
                
                highlightResponse(document.getElementById("response" + source.value));
                studentAt = source.value;
            }
            else if (autograde == 1) {
                //need to implement, reference response values and adjust grade to full 
                var responses = document.getElementsByName("trueResponse");
                for (var i = 0; i < response.length; i++) {
                    if (responses[i].value == document.getElementById("searchBar").value) {

                        var responseWeWant = document.getElementsByName("numberGrade");
                        for (var j = 0; j < responseWeWant.length; j++) {
                            if (responseWeWant[j].id = responses[i].id) {
                                responseWeWant[j] = @Model.gradeOutOf;
                            }
                        }
                    }
                }
            }
        }







        //NAV BAR FUNCTIONS FOR MOVING
        function down10() {
            if (questionSetCurrent > 0) {
                questionSetCurrent--;
                var oldQuestions = document.querySelectorAll("#questionSet" + (questionSetCurrent + 1));
                var newQuestions = document.querySelectorAll("#questionSet" + questionSetCurrent);

                for (var i = 0; i < oldQuestions.length; i++) {
                    oldQuestions[i].style = "float:left; width:40%; display:none";
                }
                for (var i = 0; i < newQuestions.length; i++) {
                    newQuestions[i].style = "float:left; width:40%"
                }

              //  document.getElementById("action2").innerHTML = "You pressed the down button";
            }
        }
       
        function up10() {       //moves the nav bar to the next 10 entries with the right arrow button

            if (questionSetCurrent < (@Model.navBarQuestions.Count/10)-1) {
                questionSetCurrent++;
                var oldQuestions = document.querySelectorAll("#questionSet" + (questionSetCurrent - 1));
                var newQuestions = document.querySelectorAll("#questionSet" + questionSetCurrent);

                for (var i = 0; i < oldQuestions.length; i++) {
                    oldQuestions[i].style = "float:left; width:40%; display:none";
                }
                for (var i = 0; i < newQuestions.length; i++) {
                    newQuestions[i].style = "float:left; width:40%"
                }

             //   document.getElementById("action2").innerHTML = "You pressed the up button";
            }
                        
        }


        function updateComments(source) {
            comments[studentAt] = source.value;
        }



        function exitRubric(source) {
            if (source.style.backgroundColor == "lightblue") {
                source.style.backgroundColor = "white";
           }
        }
        function hoverRubric(source) {
            if (source.style.backgroundColor=="white") {
                source.style.backgroundColor = "lightblue";
            }
        }

        function leftSideGrade(source) {
            //ar y = document.getElementById(x).value;
            //document.getElementById(z).innerHTML = "You wrote: " + y;
            //if (num ==studentAt) {
            //    document.getElementById("grade").value = y;
            //}

            
            document.getElementById("grade").value = source.value;
            

        }


        function myGrade() {        //counterpart to leftSideGrade, does the same thing but from the right.
            var y = document.getElementById("grade").value;
           // document.getElementById("graded").innerHTML = "You wrote: " + y;
            var grade = "grade" + studentAt; 
            document.getElementById(grade).value = y;

        }


        function revert() {                 //a function to nuke the response back to ground zero and rebuild. (shoutout to fallout 76 being released soon)
            
            document.getElementById("comment").value = "";
            //document.getElementById("action").innerHTML = "You pressed revert";
            updateComments(document.getElementById("comment"));
            document.getElementById("grade").value = 0;
            document.getElementById("grade" + studentAt).value = 0;
            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }
        }



        function save() {
            //document.getElementById("action").innerHTML = "You pressed save-------------@Model.studentAt";

            updateComments(document.getElementById("comment"));

        }




        function navBarCheck() {

            var questionNums = document.getElementsByName("questionNumber");
            //alert("Page is loaded");
            for (var i = 0; i < questionNums.length; i++) {
                if (questionNums[i].value > @Model.navBarQuestions.Count()) {
                    questionNums[i].style.visibility="hidden";
                }
            }
        }



        function highlightResponse(source) {
            var newResponse = document.querySelectorAll('#' + source.id);   //populate with new response selection elements
            var lastID = "#response" + studentAt;                           //Id of last selection pulled using studentAt variable
            var oldResponse = document.querySelectorAll(lastID);            //populate with old response selection elements


            for (var i = 0; i < oldResponse.length; i++) {                          //Deselect the old one
                if (oldResponse[i].style.backgroundColor == "aliceblue") {
                    //don't color response gray
                }
                else {
                    oldResponse[i].style.backgroundColor = "@defaultColor";
                }

            }
            for (var i = 0; i < newResponse.length; i++) {
                if (newResponse[i].style.backgroundColor == "aliceblue") {              //Highlight new one
                    //don't color response gray
                }
                else {
                    newResponse[i].style.backgroundColor = "@highlightColor";
                }

            }



            studentAt = parseInt(source.id.substr(8));  //update studentAt
            //document.getElementById("action").innerHTML = "studentAt is set to " + studentAt;       //doublecheck we right

            //CLEAR RIGHT HAND SIDE
            
            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }


            //Correctly add in things on right side
            document.getElementById("grade").value = document.getElementById("grade"+studentAt).value;
            document.getElementById("comment").value = comments[studentAt]; //TODO comment is returning as undefined still


        }





        function saveNext() {               //used for save and next button for next question highlighting
           // document.getElementById("action").innerHTML = "You pressed save&next with " + (studentAt+1) + " out of @Model.names.Count()";    //only says 0, will update only to 0
            if (studentAt != (@Model.names.Count()-1)) {


                var responseToHighlight = document.querySelectorAll("#response" + (studentAt + 1));

                var responseToDeselect = document.querySelectorAll("#response" + studentAt);
                studentAt++;



                for (var i = 0; i < responseToDeselect.length; i++) {
                    if (responseToDeselect[i].style.backgroundColor != "aliceblue") {
                        responseToDeselect[i].style.backgroundColor = "@defaultColor";
                    }
                }

                for (var j = 0; j < responseToHighlight.length; j++) {
                    if (responseToHighlight[j].style.backgroundColor != "aliceblue") {
                        responseToHighlight[j].style.backgroundColor = "@highlightColor";
                    }
                }
            }
           
            var grade ="grade" + studentAt; 

           // document.getElementById("action2").innerHTML = "You pressed save&next with " + (studentAt + 1) + " out of @Model.names.Count()";   //only says 1 and updates once



            var rubricPieces = document.querySelectorAll(".rubricButton");
            for (var i = 0; i < rubricPieces.length; i++) {
                rubricPieces[i].style.backgroundColor="@defaultColor"
            }

            document.getElementById("grade").value = document.getElementById(grade).value;
            document.getElementById("comment").value = comments[studentAt]; //TODO comment is returning as undefined still
        }



        @*function updateResponseHighlight(x, highlight) {
            if (highlight == true) {
                x.style.backgroundColor = "@highlightColor";
            }
            else {
                x.style.backgroundColor = "@defaultColor";
            }
        }*@


        function highlightRubic(source) {

            var buttons = document.querySelectorAll('#' + source.id);


            for (var x = 0; x < buttons.length; x++) {
                buttons[x].style = "width:100%; background-color:white; border:none";
            }

            source.style = "width:100%; background-color:lightgreen; border:none"

        }


            function changeQuestion(source) {
                //make api call to change page to question of this number(reference value of button)

                    document.getElementById("action").innerHTML = "Button pressed to move to question " + source.value;
                
            }



        //not needed right now until implementing the parsing rubric check. currently not working. going to comment error message
        function rubricParseCheck() {

           //alert("RUBRIC CHECK RUN with rubricParsed as " + @Model.rubricParsed);
            var source = document.getElementById("rubricWhole");
           // document.getElementById("rubricParseWarning").style = "display:none";

            if (@Model.rubricParsed == 1) {
         
                source.style ="display:none";

            }
            else {

                document.getElementById("rubricParseWarning").style = "display:none";
            }

        }
    </script>
</body>





