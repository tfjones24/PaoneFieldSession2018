@model SupaSpeedGrader.Models.GradeModel

@{ 
    ViewBag.Title = "Grade";

    string defaultColor = "white";
    string highlightColor = "lightgray";

}
<head>
    <link rel="stylesheet" type="text/css" href="StyleSheet1.css" />
    <script type="text/javascript">

    </script>
    <style>



        /* Style The Dropdown Button */
        .dropbtn {
            background-color: #4CAF50;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

        /* The container <div> - needed to position the dropdown content */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        /* Dropdown Content (Hidden by Default) */
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

            /* Links inside the dropdown */
            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                /* Change color of dropdown links on hover */
                .dropdown-content a:hover {
                    background-color: #f1f1f1
                }

        /* Show the dropdown menu on hover */
        .dropdown:hover .dropdown-content {
            display: block;
        }

        /* Change the background color of the dropdown button when the dropdown content is shown */
        .dropdown:hover .dropbtn {
            background-color: #3e8e41;
        }
    </style>

</head>

<body>
    <div style="display: flex; border-bottom:1px solid black">
        <div style="float:left; width:52%">
            <h3 style="color: #21314d"> @Model.questionName </h3>
        </div>
        <!--Navigation Bar-->
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value="<-" onclick=down10() />
        </div>
        <div style="float:left; width:40%" id="navBar">
            @for (int x = 1; x < 11; ++x)
            {
                string name = "Question" + x;
                string color = " #D3D3D3";
                if (x == Model.questionOn)
                {
                    color = "white";
                }
                <div style="float:left; width:10%">
                    <input type="button" style="width:100%; background-color:@color" value="@x" onclick=changeQuestion() id="@name"/>
                </div>
            }
        </div>     
        <div style="float:left; width:4%">
            <input type="button" style="width:100%; background-color:#D3D3D3" value="->" onclick=up10() />
        </div>
    </div>
    <p></p>
    <div>
        <!--- left column--->
        <div style="float:left; width: 75%">
            <!--- question box --->
            <div>
                <p>@Model.question </p>
            </div>
            <!--- answer box --->

            <div>
                <ul style=" list-style-type: none; padding: 0; overflow: auto; width:100%; max-height:1000px">
                    @for (int x = 0; x < Model.numStudent; x++)
                    {
                        <li id='response' onclick=highlightResponse(this) style="background-color:white">
                            @{ string color = defaultColor;
                            }
                            @if (x == Model.studentAt)
                            {
                                color = highlightColor;
                            }
                            <div style="display:flex; background-color:transparent"> <!--onclick=highlightResponse(this)-->
                                <div style="float:left; width:15%; background-color:@color" id="@x">
                                    <p> @Model.names[x]  </p>
                                </div>
                                <div style="float:left; width:50%;  border:1px solid black; border-radius:5px"> <!--onclick=highlightResponse(this)-->
                                    <p>@Model.namesAnswer[Model.names[x]]</p>
                                </div>
                                @{string m = x + "2";
                                }
                                <div style="float:left; width:35%; background-color:@color"id="@m"> <!--onclick=highlightResponse(this)-->
                                    @{
                                        string demo = "demo" + x;
                                    }
                                    <p style="text-align:center"> Grade :<input type="number" style="height:20px; width:100px; border:1px solid black; background-color:transparent " id='@Model.names[x]' value='@Model.namesGrade[Model.names[x]]' onchange="myFunction('@Model.names[x]','@demo',@x)" /> / @Model.gradeOutOf</p>

                                    <p id="@demo"></p>

                                </div>
                            </div>
                        </li>
                        <p></p>
                                        }
                </ul>
            </div>

        </div>
        <!--- right column--->
        <div style="float:left; width: 25%;">
            <!--- top row--->
            <div style="display: flex">
                <div style="float:left; width:33%; border-right:2px solid black;">
                    <form><p style="color: blue; font-size:70%">Highlight Keyword</p></form>

                </div>
                <div style="float:left; width:33%; border-right:2px solid black;">
                    <form><p style="color: blue;font-size:70%"> Jump to...</p></form>
                </div>
                <div style="float:left; width:33%; ">
                    <form><p style="color: blue; font-size:70%"> Autograde and Filter</p></form>
                </div>
            </div>
            <!--- Rubic--->
            <div>
                <p>@Model.rubicTitle</p>
                @for (int i = 0; i < Model.rubicRows; ++i)
                {<div style="display: flex">
                     <div style="float:left; width: @Model.width%;background-color:grey;border:1px solid black " >
                         @Model.rubic[i][0]
                     </div>
                        @for (int j = 1; j < Model.rubicCols; ++j)
                        {

                            string clap = "rubr" + i;

                            <div style="float:left; width:@Model.width%;border:1px solid black">
                                <input onclick=highlightRubic(this) type="button" style="width:100%; background-color:white; border:none" value="@Model.rubic[i][j]" id='@clap' />
                            </div>
                        }
                    </div>

                }

            </div>
            <p></p>
            <!--- next row--->
            <div style="display: flex">
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value=" Revert" onclick=revert() /></form>
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save" onclick=save() /></form>
                </div>
                <div style="float:left; width:33%;">
                    <form><input type="button" style="width:100%; background-color:#D3D3D3" value="Save&Next" onclick=saveNext() /></form>
                </div>
            </div>
            <p></p>
            <!--- Comment Box--->
            <div>
                <textarea style="height:100px; width:100%; border:1px solid black; border-radius:5px" name="comment">@Model.namesComment[Model.names[Model.studentAt]]</textarea>
            </div>
            <!--- Grade Box-->
            <div style="height:10%">
                <p>Grade : <input type="number" style="height:20px; width:100px; border:1px solid black;overflow:visible " id="grade" value="@Model.namesGrade[Model.names[Model.studentAt]]" onchange="myGrade()"/> /@Model.gradeOutOf</p>
            </div>
            <p id="graded"></p>
        </div>
    </div>

    <p id="action"></p>
    <p id="action2"></p>
    <p id="action 3"></p>
    <script>
        function down10() {
            @{

                if (Model.questionStartShow != 0)
                {
                    Model.questionStartShow = Model.questionStartShow - 10;
                }

             }
            reloadQuestions();
            
        }
        function reloadQuestions() {
            for (var i = 1; i < 11; ++i)
            {
                @{ 
                    int l = 10;
                    string name1 = "Question" + l;
                    string color1 = " #D3D3D3";
                    if (l == Model.questionOn)
                    {
                        color1 = "white";
                    }
                }
                
                document.getElementById(@name1).style.backgroundColor = @color1;
                document.getElementById(@name1).value = @l;
                @{ 
                    l++;
                        }

            }
        }
            
               


            }
        function changeQuestion() {

        }
        function up10() {
            @{
                Model.questionStartShow=Model.questionStartShow+10;
                if ((Model.questionNum < Model.questionStartShow))
                {
                    Model.questionStartShow = (Model.questionNum / 10) * 10;
                }
            }
            reloadQuestions();
        }
        function myFunction(x, z, num) {
            var y = document.getElementById(x).value;
            document.getElementById(z).innerHTML = "You wrote: " + y;
            if (num ==@Model.studentAt) {
                document.getElementById("grade").value = y;
            }

        }
        function myGrade() {
            var y = document.getElementById("grade").value;
            document.getElementById("graded").innerHTML = "You wrote: " + y;
            document.getElementById("@Model.names[Model.studentAt]").value = y;

        }
        function revert() {
            document.getElementById("action").innerHTML = "You pressed revert";
        }
        function save() {
            document.getElementById("action").innerHTML = "You pressed save";
        }
        function saveNext() {
            document.getElementById("action").innerHTML = "You pressed save&next with @Model.studentAt out of @Model.names.Count()";
            //remove highlight from initial
           @{ string y = Model.studentAt + "2";
               }
            updateResponseHighlight("@Model.studentAt",false);
            updateResponseHighlight("@y", false);
            @{ 
                Model.studentAt = (Model.studentAt + 1) % Model.names.Count();
                y = Model.studentAt + "2";
            }
            //add highlight to update
            updateResponseHighlight("@Model.studentAt", true);
            updateResponseHighlight("@y", true);
            document.getElementById("grade").value = @Model.namesGrade[Model.names[Model.studentAt]];
            document.getElementById("action2").innerHTML = "You pressed save&next with @Model.studentAt out of @Model.names.Count()";
        }
        function updateResponseHighlight(x, highlight) {
            if (highlight == true) {
                document.getElementById(x).style.backgroundColor = "@highlightColor";
            }
            else {
                document.getElementById(x).style.backgroundColor = "@defaultColor";
            }
        }
        function highlightRubic(source) {

            var buttons = document.querySelectorAll('#' + source.id);


            for (var x = 0; x < buttons.length; x++) {
                buttons[x].style = "width:100%; background-color:white; border:none";
            }

            source.style = "width:100%; background-color:lightgreen; border:none"

        }
 //       function highlightResponse(source) {
            //var responses = document.querySelectAll('#' + source.id)
            //  for (var i = 0; i < responses.length; i++) {
            //        responses[i] =
            //}
 //           document.getElementById("action").innerHTML = "POTATO";
 //           var responses = document.querySelectorAll('#response');
 //           for (var x = 0; x < responses.length) {
  //              responses[x].style = "background-color:white";
 //           }
  //          source.style = "background-color:lightgreen"

//        }
    </script>
</body>





